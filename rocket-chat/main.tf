locals {
  bucket = "${var.mongodump.bucket_prefix}-rocket-chat-mongodump"

  mongodb_uri       = "mongodb://rocket-chat:${random_password.mongodb_password.result}@rocket-chat-database-mongodb-0.rocket-chat-database-mongodb-headless,rocket-chat-database-mongodb-1.rocket-chat-database-mongodb-headless,rocket-chat-database-mongodb-arbiter-0.rocket-chat-database-mongodb-arbiter-headless:27017/rocket-chat-db?replicaSet=rs0"
  mongodb_oplog_uri = "mongodb://root:${random_password.mongodb_root_password.result}@rocket-chat-database-mongodb-0.rocket-chat-database-mongodb-headless,rocket-chat-database-mongodb-1.rocket-chat-database-mongodb-headless,rocket-chat-database-mongodb-arbiter-0.rocket-chat-database-mongodb-arbiter-headless:27017/local?replicaSet=rs0&authSource=admin"

}

resource "helm_release" "rocket-chat_deployment" {
  name       = "rocket-chat"
  repository = "https://rocketchat.github.io/helm-charts"
  chart      = "rocketchat"
  version    = var.chart_versions.rocketchat
  namespace  = var.namespace

  values = [
    data.template_file.rocketchat_values.rendered
  ]
}

data "template_file" "rocketchat_values" {
  template = file("${path.module}/values-rocketchat.yaml")

  vars = {
    image_tag    = var.image_tags.rocketchat
    host         = var.host
    app_replicas = var.app_replicas

    mongodb_uri       = local.mongodb_uri
    mongodb_oplog_uri = local.mongodb_oplog_uri

    smtp_host     = "smtp.eu.sparkpostmail.com"
    smtp_port     = 2525
    smtp_username = "SMTP_Injection"
    smtp_password = var.smtp_password

    tls_secret_name = kubernetes_secret.rocket_chat_tls_certificate.metadata.0.name
  }
}

resource "helm_release" "database" {
  name       = "rocket-chat-database"
  repository = "https://charts.bitnami.com/bitnami"
  chart      = "mongodb"
  version    = var.chart_versions.mongodb
  namespace  = var.namespace

  values = [
    data.template_file.mongodb_values.rendered
  ]
}

data "template_file" "mongodb_values" {
  template = file("${path.module}/values-mongodb.yaml")

  vars = {
    image_tag = var.image_tags.mongodb
    node_pool = var.node_pool

    mongodb_database        = "rocket-chat-db"
    mongodb_username        = "rocket-chat"
    mongodb_password        = random_password.mongodb_password.result
    mongodb_root_password   = random_password.mongodb_root_password.result
    mongodb_replica_set_key = random_password.mongodb_replica_set_key.result
  }
}

resource "kubernetes_cron_job" "mongodump" {
  metadata {
    name      = "rocket-chat-mongodump"
    namespace = var.namespace

    labels = {
      app = "rocket-chat-mongodump"
    }
  }

  spec {
    concurrency_policy = "Forbid"
    schedule           = var.mongodump.schedule
    job_template {
      metadata {}
      spec {
        backoff_limit = 2
        template {
          metadata {}
          spec {
            node_selector = {
              "cloud.google.com/gke-nodepool" = var.node_pool
            }

            container {
              name  = "rocket-chat-mongodump"
              image = var.mongodump.image
              args  = ["/bin/sh", "/tmp/run.sh"]

              volume_mount {
                mount_path = "/tmp/run.sh"
                sub_path   = "run.sh"
                name       = "run-sh-volume"
                read_only  = true
              }
            }

            volume {
              name = "run-sh-volume"

              secret {
                secret_name = kubernetes_secret.mongodump.metadata.0.name

                items {
                  key  = "run.sh"
                  path = "run.sh"
                  mode = "0444"
                }
              }
            }
          }
        }
      }
    }
  }
}

resource "kubernetes_secret" "mongodump" {
  metadata {
    name      = "rocket-chat-mongodump"
    namespace = var.namespace
  }

  data = {
    "run.sh" = data.template_file.run_sh.rendered
  }
}

data "template_file" "run_sh" {
  template = file("${path.module}/run.sh")

  vars = {
    database_uri = local.mongodb_uri

    bucket_url                 = "gs://${local.bucket}"
    bucket_service_account_key = base64decode(google_service_account_key.mongodump.private_key)
  }
}

resource "random_password" "mongodb_password" {
  length  = 32
  special = false
}

resource "random_password" "mongodb_root_password" {
  length  = 32
  special = false
}

resource "random_password" "mongodb_replica_set_key" {
  length  = 32
  special = false
}

resource "google_storage_bucket" "mongodump" {
  name     = local.bucket
  location = "US"
}

resource "google_service_account" "mongodump" {
  account_id   = "rocket-chat-mongodbump"
  display_name = "Rocket Chat mongodump - Generated by Terraform"
}

resource "google_service_account_key" "mongodump" {
  service_account_id = google_service_account.mongodump.name
}

resource "google_storage_bucket_iam_member" "mongodump" {
  bucket = google_storage_bucket.mongodump.name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${google_service_account.mongodump.email}"
}

resource "kubernetes_secret" "rocket_chat_tls_certificate" {
  type = "kubernetes.io/tls"

  metadata {
    name      = "rocket-chat-tls"
    namespace = var.namespace
  }

  data = {
    "tls.crt" = module.cert.crt
    "tls.key" = module.cert.key
  }
}

module "cert" {
  source = "../tls-self-signed-cert"
  domain = var.host
}
